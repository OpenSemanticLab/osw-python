# generated by datamodel-codegen:
#   filename:  Item.json
#   timestamp: 2024-12-10T05:09:51+00:00

from __future__ import annotations

from typing import Any, List, Literal, Optional, Set, Union
from uuid import UUID, uuid4

from pydantic.v1 import Field, constr

from osw.model.static import OswBaseModel


class ReadAccess(OswBaseModel):
    class Config:
        schema_extra = {"title": "Read access", "title*": {"de": "Lesezugriff"}}

    level: Optional[Literal["public", "internal", "restricted"]] = Field(
        None, title="Level"
    )


class AccessRestrictions(OswBaseModel):
    class Config:
        schema_extra = {
            "title": "Access restrictions",
            "title*": {"de": "Zugriffsbeschr√§nkungen"},
            "eval_template": {
                "$comment": "See https://www.mediawiki.org/wiki/Extension:Semantic_ACL",
                "type": "mustache-wikitext",
                "mode": "render",
                "value": "{{entry_access.read.level}} {{=<% %>=}} {{#set: |Visible to= {{#switch: <%={{ }}=%> {{{entry_access.read.level}}} {{=<% %>=}} |public=public |internal=users |restricted=whitelist |#default=}} }} <%={{ }}=%>",
            },
        }

    read: Optional[ReadAccess] = Field(None, title="Read access")


class Label(OswBaseModel):
    class Config:
        schema_extra = {
            "@context": {
                "rdf": "http://www.w3.org/2000/01/rdf-schema#",
                "text": {"@id": "@value"},
                "lang": {"@id": "@language"},
            },
            "title": "Label",
        }

    text: constr(min_length=1) = Field(..., title="Text")
    lang: Optional[Literal["en", "de"]] = Field("en", title="Lang code")


class Description(OswBaseModel):
    class Config:
        schema_extra = {
            "@context": {
                "rdf": "http://www.w3.org/2000/01/rdf-schema#",
                "text": {"@id": "@value"},
                "lang": {"@id": "@language"},
            },
            "title": "Description",
        }

    text: constr(min_length=1) = Field(..., title="Text")
    lang: Optional[Literal["en", "de"]] = Field("en", title="Lang code")


class WikiPage(OswBaseModel):
    """
    The wiki page containing this entity
    """

    class Config:
        schema_extra = {
            "title": "Wiki page",
            "description": "The wiki page containing this entity",
        }

    title: Optional[str] = Field(None, title="Title")
    """
    The page title
    """
    namespace: Optional[str] = Field(None, example="Category", title="Namespace")
    """
    The page namespace
    """


class Meta(OswBaseModel):
    class Config:
        schema_extra = {
            "@context": {
                "change_id": {"@id": "Property:HasChangeId", "@type": "xsd:string"}
            },
            "title": "Meta",
        }

    uuid: UUID = Field(default_factory=uuid4, title="UUID")
    wiki_page: Optional[WikiPage] = Field(None, title="Wiki page")
    """
    The wiki page containing this entity
    """
    change_id: Optional[List[str]] = Field(None, title="Change IDs")
    """
    To keep track of concerted changes
    """


class Entity(OswBaseModel):
    class Config:
        schema_extra = {
            "@context": {
                "bvco": "https://bvco.ontology.link/",
                "databatt": "http://www.databatt.org/",
                "emmo": "https://w3id.org/emmo#",
                "emmobattery": "https://w3id.org/emmo/domain/battery#",
                "emmochameo": "https://w3id.org/emmo/domain/chameo#",
                "emmochemicals": "https://w3id.org/emmo/domain/chemicalsubstance#",
                "emmoelch": "https://w3id.org/emmo/domain/electrochemistry#",
                "schema": "https://schema.org/",
                "skos": "https://www.w3.org/TR/skos-reference/",
                "xsd": "http://www.w3.org/2001/XMLSchema#",
                "wiki": "https://wiki-dev.open-semantic-lab.org/id/",
                "Category": {"@id": "wiki:Category-3A", "@prefix": True},
                "File": {
                    "@id": "https://wiki-dev.open-semantic-lab.org/wiki/Special:Redirect/file/",
                    "@prefix": True,
                },
                "Property": {"@id": "wiki:Property-3A", "@prefix": True},
                "Item": {"@id": "wiki:Item-3A", "@prefix": True},
                "attachments*": {"@id": "Property:HasFileAttachment", "@type": "@id"},
                "based_on": {"@id": "skos:isBasedOn", "@type": "@id"},
                "based_on*": {"@id": "Property:IsBasedOn", "@type": "@id"},
                "description": {"@id": "skos:definition", "@type": "@id"},
                "description*": {"@id": "Property:HasDescription", "@type": "@id"},
                "image": {"@id": "schema:image", "@type": "@id"},
                "image*": {"@id": "Property:HasImage", "@type": "@id"},
                "label": {"@id": "skos:prefLabel", "@type": "@id"},
                "label*": {"@id": "Property:HasLabel", "@type": "@id"},
                "lang": {"@id": "@language"},
                "meta": {
                    "@id": "Property:HasMeta",
                    "@type": "@id",
                    "@context": {
                        "change_id": {
                            "@id": "Property:HasChangeId",
                            "@type": "xsd:string",
                        }
                    },
                },
                "name*": {"@id": "Property:HasName"},
                "ordering_categories": {"@id": "Property:Category", "@type": "@id"},
                "ordering_categories*": {
                    "@id": "Property:HasClassificationCategory",
                    "@type": "@id",
                },
                "query_label": {"@id": "Property:HasLabel", "@type": "@id"},
                "rdf_type": {"@id": "@type", "@type": "@id"},
                "rdf_type*": {"@id": "schema:additionalType", "@type": "@id"},
                "rdf_type**": {"@id": "owl:sameAs", "@type": "@id"},
                "rdf_type***": {"@id": "Property:Equivalent_URI", "@type": "@id"},
                "short_name": {"@id": "Property:HasShortName"},
                "keywords": {"@id": "schema:keywords", "@type": "@id"},
                "keywords*": {"@id": "Property:HasKeyword", "@type": "@id"},
                "statements": {"@id": "Property:HasStatement", "@type": "@id"},
                "text": {"@id": "@value"},
                "uuid*": {"@id": "Property:HasUuid"},
            },
            "uuid": "ce353767-c628-45bd-9d88-d6eb3009aec0",
            "title": "Entity",
            "defaultProperties": ["description"],
        }

    rdf_type: Optional[Set[str]] = Field(None, title="Additional RDF type(s)")
    """
    Declares additional type(s) for this entity, e.g., to state that this entity has the same meaning as a term in a controlled vocabulary or ontology. This property is synonymous to the schema:additionalType and owl:sameAs. The default syntax is ontology:TermName. The ontology prefix has to be defined in the @context of the Entity, the category or any of the parent categories. The term name has to be a valid identifier in the ontology.
    """
    uuid: UUID = Field(default_factory=uuid4, title="UUID")
    iri: Optional[str] = Field(None, title="IRI")
    """
    The Internationalized Resource Identifier (IRI) of this entity
    """
    name: Optional[str] = Field(None, title="Technical name")
    """
    Technical / Machine compatible name
    """
    label: List[Label] = Field(..., min_items=1, title="Label(s)")
    """
    At least one label is required.
    """
    short_name: Optional[List[Label]] = Field(None, title="Short name(s)")
    """
    Abbreviation, Acronym, etc.
    """
    query_label: Optional[str] = Field(None, title="Query label")
    description: Optional[List[Description]] = Field(None, title="Description")
    image: Optional[str] = Field(None, title="Image")
    ordering_categories: Optional[List[str]] = Field(
        None, title="Classification categories"
    )
    """
    Classification categories are used to categorize instances, e.g., according to their use but not their properties. When querying for instances of a here listed classification category, this instance will be returned. Note: Classification categories define no properties, while 'regular' categories define properties, which an instance assigns values to.
    """
    keywords: Optional[List[str]] = Field(None, title="Keywords / Tags")
    """
    Designated to the user defined categorization of this element
    """
    based_on: Optional[List[str]] = Field(None, title="Based on")
    """
    Other entities on which this one is based, e.g. when it is created by copying
    """
    statements: Optional[
        List[Union[ObjectStatement, DataStatement, QuantityStatement]]
    ] = Field(None, title="Statements")
    attachments: Optional[List[str]] = Field(None, title="File attachments")
    meta: Optional[Meta] = None


class ObjectStatement(OswBaseModel):
    class Config:
        schema_extra = {"title": "Object Statement"}

    rdf_type: Optional[Any] = "rdf:Statement"
    uuid: UUID = Field(default_factory=uuid4, title="UUID")
    label: Optional[List[Label]] = Field(None, title="Label")
    """
    Human readable name
    """
    subject: Optional[str] = Field(None, title="Subject")
    substatements: Optional[
        List[Union[ObjectStatement, DataStatement, QuantityStatement]]
    ] = Field(None, title="Substatements")
    predicate: str = Field(..., title="Predicate")
    object: str = Field(..., title="Object")


class DataStatement(OswBaseModel):
    class Config:
        schema_extra = {"title": "Data Statement"}

    rdf_type: Optional[Any] = "rdf:Statement"
    uuid: UUID = Field(default_factory=uuid4, title="UUID")
    label: Optional[List[Label]] = Field(None, title="Label")
    """
    Human readable name
    """
    subject: Optional[str] = Field(None, title="Subject")
    substatements: Optional[
        List[Union[ObjectStatement, DataStatement, QuantityStatement]]
    ] = Field(None, title="Substatements")
    property: str = Field(..., title="Property")
    value: str = Field(..., title="Value")


class QuantityStatement(OswBaseModel):
    class Config:
        schema_extra = {"title": "Quantity Statement"}

    rdf_type: Optional[Any] = "rdf:Statement"
    uuid: UUID = Field(default_factory=uuid4, title="UUID")
    label: Optional[List[Label]] = Field(None, title="Label")
    """
    Human readable name
    """
    subject: Optional[str] = Field(None, title="Subject")
    substatements: Optional[
        List[Union[ObjectStatement, DataStatement, QuantityStatement]]
    ] = Field(None, title="Substatements")
    quantity: str = Field(..., title="Property")
    numerical_value: str = Field(..., title="Value")
    unit: str = Field(..., title="Unit")
    unit_symbol: str
    value: str = Field(..., title="Value")


class Item(Entity):
    class Config:
        schema_extra = {
            "@context": [
                "/wiki/Category:Entity?action=raw&slot=jsonschema",
                {
                    "type": {"@id": "Property:HasType", "@type": "@id"},
                    "type*": {"@id": "Property:HasSchema", "@type": "@id"},
                },
            ],
            "title": "Item",
        }

    type: Optional[List[str]] = Field(
        ["Category:Item"], min_items=1, title="Types/Categories"
    )
    entry_access: Optional[AccessRestrictions] = Field(
        None, title="Access restrictions"
    )


Entity.update_forward_refs()
ObjectStatement.update_forward_refs()
DataStatement.update_forward_refs()
QuantityStatement.update_forward_refs()
Item.update_forward_refs()
