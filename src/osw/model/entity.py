# generated by datamodel-codegen:
#   filename:  Item.json
#   timestamp: 2025-03-04T03:31:19+00:00

from __future__ import annotations

from typing import Any, List, Literal, Optional, Set, Type, TypeVar, Union
from uuid import UUID, uuid4

from pydantic.v1 import Field, constr

from osw.model.static import Ontology, OswBaseModel


class ReadAccess(OswBaseModel):
    class Config:
        schema_extra = {"title": "Read access", "title*": {"de": "Lesezugriff"}}

    level: Optional[Literal["public", "internal", "restricted"]] = Field(
        None,
        options={
            "enum_titles": ["Public", "For all users", "For some users"],
            "enum_titles*": ["Öffentlich", "Für alle Nutzer", "Für bestimmte Nutzer"],
        },
        title="Level",
        title_={"de": "Level"},
    )


class AccessRestrictions(OswBaseModel):
    class Config:
        schema_extra = {
            "title": "Access restrictions",
            "title*": {"de": "Zugriffsbeschränkungen"},
            "eval_template": {
                "$comment": "See https://www.mediawiki.org/wiki/Extension:Semantic_ACL",
                "type": "mustache-wikitext",
                "mode": "render",
                "value": "{{entry_access.read.level}} {{=<% %>=}} {{#set: |Visible to= {{#switch: <%={{ }}=%> {{{entry_access.read.level}}} {{=<% %>=}} |public=public |internal=users |restricted=whitelist |#default=}} }} <%={{ }}=%>",
            },
        }

    read: Optional[ReadAccess] = Field(
        None, title="Read access", title_={"de": "Lesezugriff"}
    )


class Label(OswBaseModel):
    class Config:
        schema_extra = {
            "@context": {
                "rdf": "http://www.w3.org/2000/01/rdf-schema#",
                "text": {"@id": "@value"},
                "lang": {"@id": "@language"},
            },
            "title": "Label",
        }

    text: constr(min_length=1) = Field(
        ...,
        options={
            "input_width": "800px",
            "inputAttributes": {"placeholder": "Title of the entry"},
            "inputAttributes*": {"de": {"placeholder": "Titel dieses Eintrags"}},
        },
        title="Text",
        title_={"de": "Text"},
    )
    lang: Optional[Literal["en", "de"]] = Field(
        "en",
        default_={"en": "en", "de": "de"},
        options={"input_width": "100px"},
        title="Lang code",
        title_={"de": "Sprache"},
    )


class Description(OswBaseModel):
    class Config:
        schema_extra = {
            "@context": {
                "rdf": "http://www.w3.org/2000/01/rdf-schema#",
                "text": {"@id": "@value"},
                "lang": {"@id": "@language"},
            },
            "title": "Description",
        }

    text: constr(min_length=1) = Field(
        ..., options={"input_width": "800px"}, title="Text", title_={"de": "Text"}
    )
    lang: Optional[Literal["en", "de"]] = Field(
        "en",
        default_={"en": "en", "de": "de"},
        options={"input_width": "100px"},
        title="Lang code",
        title_={"de": "Sprache"},
    )


class WikiPage(OswBaseModel):
    """
    The wiki page containing this entity
    """

    class Config:
        schema_extra = {
            "title": "Wiki page",
            "description": "The wiki page containing this entity",
        }

    title: Optional[str] = Field(None, title="Title")
    """
    The page title
    """
    namespace: Optional[str] = Field(None, example="Category", title="Namespace")
    """
    The page namespace
    """


class Meta(OswBaseModel):
    class Config:
        schema_extra = {
            "@context": {
                "change_id": {"@id": "Property:HasChangeId", "@type": "xsd:string"}
            },
            "title": "Meta",
        }

    uuid: UUID = Field(default_factory=uuid4, options={"hidden": True}, title="UUID")
    wiki_page: Optional[WikiPage] = Field(None, title="Wiki page")
    """
    The wiki page containing this entity
    """
    change_id: Optional[List[str]] = Field(None, title="Change IDs")
    """
    To keep track of concerted changes
    """


class Entity(OswBaseModel):
    class Config:
        schema_extra = {
            "@context": {
                "schema": "https://schema.org/",
                "skos": "https://www.w3.org/TR/skos-reference/",
                "xsd": "http://www.w3.org/2001/XMLSchema#",
                "wiki": "https://wiki-dev.open-semantic-lab.org/id/",
                "Category": {"@id": "wiki:Category-3A", "@prefix": True},
                "File": {
                    "@id": "https://wiki-dev.open-semantic-lab.org/wiki/Special:Redirect/file/",
                    "@prefix": True,
                },
                "Property": {"@id": "wiki:Property-3A", "@prefix": True},
                "Item": {"@id": "wiki:Item-3A", "@prefix": True},
                "attachments*": {"@id": "Property:HasFileAttachment", "@type": "@id"},
                "based_on": {"@id": "skos:isBasedOn", "@type": "@id"},
                "based_on*": {"@id": "Property:IsBasedOn", "@type": "@id"},
                "description": {"@id": "skos:definition"},
                "description*": {"@id": "Property:HasDescription"},
                "image": {"@id": "schema:image", "@type": "@id"},
                "image*": {"@id": "Property:HasImage", "@type": "@id"},
                "label": {"@id": "skos:prefLabel"},
                "label*": {"@id": "Property:HasLabel"},
                "lang": {"@id": "@language"},
                "text": {"@id": "@value"},
                "uuid*": {"@id": "Property:HasUuid"},
                "meta": {
                    "@id": "Property:HasMeta",
                    "@type": "@id",
                    "@context": {
                        "change_id": {
                            "@id": "Property:HasChangeId",
                            "@type": "xsd:string",
                        }
                    },
                },
                "name*": {"@id": "Property:HasName"},
                "ordering_categories": {"@id": "Property:Category", "@type": "@id"},
                "ordering_categories*": {
                    "@id": "Property:HasClassificationCategory",
                    "@type": "@id",
                },
                "query_label": {"@id": "Property:HasLabel", "@type": "@id"},
                "rdf_type": {"@id": "@type", "@type": "@id"},
                "rdf_type*": {"@id": "schema:additionalType", "@type": "@id"},
                "rdf_type**": {"@id": "owl:sameAs", "@type": "@id"},
                "rdf_type***": {"@id": "Property:Equivalent_URI", "@type": "@id"},
                "short_name": {"@id": "Property:HasShortName"},
                "keywords": {"@id": "schema:keywords", "@type": "@id"},
                "keywords*": {"@id": "Property:HasKeyword", "@type": "@id"},
                "statements": {"@id": "Property:HasStatement", "@type": "@id"},
            },
            "uuid": "ce353767-c628-45bd-9d88-d6eb3009aec0",
            "title": "Entity",
            "defaultProperties": ["description"],
        }

    rdf_type: Optional[Set[str]] = Field(
        None,
        description_={
            "de": "Gibt zusätzliche Typens für diese Entität an, z. B. um anzugeben, dass diese Entität dieselbe Bedeutung hat wie ein Begriff in einem kontrollierten Vokabular oder einer Ontologie. Diese Eigenschaft ist ein Synonym für schema:additionalType und owl:sameAs. Die Standardsyntax ist ontology:TermName. Das Ontologie-Präfix muss im @cotext der Entität, der Kategorie oder einer der beerbten Kategorien definiert werden. Der Termname muss ein gültiger Bezeichner in der Ontologie sein."
        },
        title="Additional RDF type(s)",
        title_={"de": "Zusätzliche(r) RDF-Typ(en)"},
    )
    """
    Declares additional type(s) for this entity, e.g., to state that this entity has the same meaning as a term in a controlled vocabulary or ontology. This property is synonymous to the schema:additionalType and owl:sameAs. The default syntax is ontology:TermName. The ontology prefix has to be defined in the @context of the Entity, the category or any of the parent categories. The term name has to be a valid identifier in the ontology.
    """
    uuid: UUID = Field(default_factory=uuid4, options={"hidden": True}, title="UUID")
    iri: Optional[str] = Field(
        None,
        description_={
            "de": "Der internationalisierte Ressourcenbezeichner (IRI) dieser Entität"
        },
        options={"hidden": True},
        title="IRI",
    )
    """
    The Internationalized Resource Identifier (IRI) of this entity
    """
    name: Optional[str] = Field(
        None,
        description_={"de": "Technischer / Maschinenkompatibler Name"},
        options={"hidden": True},
        title="Technical name",
        title_={"de": "Technischer Name"},
    )
    """
    Technical / Machine compatible name
    """
    label: List[Label] = Field(
        ...,
        description_={"de": "Mindestens eine Bezeichnung ist erforderlich."},
        eval_template=[
            {
                "type": "mustache-wikitext",
                "mode": "render",
                "$comment": "Displays value according to user language with eng as fallback option. Note: {{=<% %>=}} changes mustache expression from {{..}} to <% %> for mixing with wikitext templates",
                "value": "{{=<% %>=}} {{#switch:{{USERLANGUAGECODE}} <%#label%> | {{#ifeq: <%lang%>|en|#default|<%lang%>}} = <%text%> <%/label%> }}",
            }
        ],
        min_items=1,
        title="Label(s)",
        title_={"de": "Bezeichnung(en)"},
    )
    """
    At least one label is required.
    """
    short_name: Optional[List[Label]] = Field(
        None,
        description_={"de": "Abkürzung, Akronym, etc."},
        eval_template={
            "type": "mustache-wikitext",
            "mode": "render",
            "$comment": "Displays value according to user language with eng as fallback option. Note: {{=<% %>=}} changes mustache expression from {{..}} to <% %> for mixing with wikitext templates",
            "value": "{{=<% %>=}} {{#switch:{{USERLANGUAGECODE}} <%#short_name%> | {{#ifeq: <%lang%>|en|#default|<%lang%>}} = <%text%> <%/short_name%> }}",
        },
        title="Short name(s)",
        title_={"de": "Kurzname(n)"},
    )
    """
    Abbreviation, Acronym, etc.
    """
    query_label: Optional[str] = Field(
        None,
        options={"hidden": True, "conditional_visible": {"modes": ["query"]}},
        title="Query label",
        title_={"de": "Abfrage-Bezeichnung"},
    )
    description: Optional[List[Description]] = Field(
        None,
        eval_template={
            "type": "mustache-wikitext",
            "mode": "render",
            "$comment": "Displays value according to user language with eng as fallback option. Note: {{=<% %>=}} changes mustache expression from {{..}} to <% %> for mixing with wikitext templates",
            "value": "{{=<% %>=}} {{#switch:{{USERLANGUAGECODE}} <%#description%> | {{#ifeq: <%lang%>|en|#default|<%lang%>}} = <%text%> <%/description%> }}",
        },
        title="Description",
        title_={"de": "Beschreibung"},
    )
    image: Optional[str] = Field(
        None,
        links=[
            {
                "href": "{{#if self}}/w/index.php?title=Special:Redirect/file/{{self}}&width=200&height=200{{/if}}",
                "mediaType": "image",
            },
            {
                "href": "{{#if self}}/w/index.php?title=Special:Redirect/file/{{self}}{{/if}}",
                "rel": "{{#if self}}download{{/if}}",
                "download": True,
            },
        ],
        options={"upload": {}},
        propertyOrder=1020,
        title="Image",
        title_={"de": "Bild"},
    )
    ordering_categories: Optional[List[str]] = Field(
        None,
        description_={
            "de": "Ordnungskategorien werden verwendet, um Instanzen zu kategorisieren, z. B. nach ihrer Verwendung, nicht aber nach ihren Eigenschaften. Bei der Abfrage nach Instanzen einer hier aufgeführten Ordnungskategorie wird diese Instanz zurückgegeben. Hinweis: Ordnungskategorien definieren keine Eigenschaften, während 'normale' Kategorien Eigenschaften definieren, denen eine Instanz Werte zuweist."
        },
        eval_template={
            "type": "mustache-wikitext",
            "mode": "render",
            "value": "{{=<% %>=}}<%#ordering_categories%>[[:<%.%>]] <br> <%/ordering_categories%>",
        },
        title="Classification categories",
        title_={"de": "Ordnungskategorien"},
    )
    """
    Classification categories are used to categorize instances, e.g., according to their use but not their properties. When querying for instances of a here listed classification category, this instance will be returned. Note: Classification categories define no properties, while 'regular' categories define properties, which an instance assigns values to.
    """
    keywords: Optional[List[str]] = Field(
        None,
        description_={"de": "Dient der nutzerdefinierten Kategorisierung des Elements"},
        eval_template={
            "type": "mustache-wikitext",
            "mode": "render",
            "value": "{{#keywords}}[[{{{.}}}]] <br> {{/keywords}}",
        },
        title="Keywords / Tags",
        title_={"de": "Schlagworte / Tags"},
    )
    """
    Designated to the user defined categorization of this element
    """
    based_on: Optional[List[str]] = Field(
        None,
        description_={
            "de": "Andere Entitäten auf die diese basiert, z. B. wenn sie durch Kopieren entstanden ist"
        },
        options={"hidden": "true"},
        title="Based on",
        title_={"de": "Basierend auf"},
    )
    """
    Other entities on which this one is based, e.g. when it is created by copying
    """
    statements: Optional[
        List[Union[ObjectStatement, DataStatement, QuantityStatement]]
    ] = Field(
        None,
        eval_template={
            "type": "mustache-wikitext",
            "mode": "render",
            "value": "{{#statements}}.. {{#predicate}}[[{{predicate}}]]{{/predicate}}{{#property}}[[{{property}}]]{{/property}}{{#quantity}}[[{{quantity}}]]{{/quantity}} {{#object}}[[{{object}}]]{{/object}}{{#value}}{{value}}{{/value}}<br>{{/statements}}",
        },
        propertyOrder=1010,
        title="Statements",
        title_={"de": "Aussagen"},
    )
    attachments: Optional[List[str]] = Field(
        None,
        eval_template={
            "type": "mustache-wikitext",
            "mode": "render",
            "value": "{{=<% %>=}} <%={{ }}=%>  {{#attachments}}{{{.}}};{{/attachments}} {{=<% %>=}} <%={{ }}=%>",
        },
        options={"collapsed": True},
        propertyOrder=1030,
        title="File attachments",
        title_={"de": "Dateianhänge"},
    )
    meta: Optional[Meta] = Field(None, options={"hidden": True})


class ObjectStatement(OswBaseModel):
    class Config:
        schema_extra = {"title": "Object Statement"}

    rdf_type: Optional[Any] = "rdf:Statement"
    uuid: UUID = Field(default_factory=uuid4, title="UUID")
    label: Optional[List[Label]] = Field(None, title="Label")
    """
    Human readable name
    """
    subject: Optional[str] = Field(None, title="Subject")
    substatements: Optional[
        List[Union[ObjectStatement, DataStatement, QuantityStatement]]
    ] = Field(None, title="Substatements")
    predicate: str = Field(..., title="Predicate")
    object: str = Field(..., title="Object")


class DataStatement(OswBaseModel):
    class Config:
        schema_extra = {"title": "Data Statement"}

    rdf_type: Optional[Any] = "rdf:Statement"
    uuid: UUID = Field(default_factory=uuid4, title="UUID")
    label: Optional[List[Label]] = Field(None, title="Label")
    """
    Human readable name
    """
    subject: Optional[str] = Field(None, title="Subject")
    substatements: Optional[
        List[Union[ObjectStatement, DataStatement, QuantityStatement]]
    ] = Field(None, title="Substatements")
    property: str = Field(..., title="Property")
    value: str = Field(..., title="Value")


class QuantityStatement(OswBaseModel):
    class Config:
        schema_extra = {"title": "Quantity Statement"}

    rdf_type: Optional[Any] = "rdf:Statement"
    uuid: UUID = Field(default_factory=uuid4, title="UUID")
    label: Optional[List[Label]] = Field(None, title="Label")
    """
    Human readable name
    """
    subject: Optional[str] = Field(None, title="Subject")
    substatements: Optional[
        List[Union[ObjectStatement, DataStatement, QuantityStatement]]
    ] = Field(None, title="Substatements")
    quantity: str = Field(..., title="Property")
    numerical_value: str = Field(..., title="Value")
    unit: str = Field(..., title="Unit")
    unit_symbol: str
    value: str = Field(..., title="Value")


class Item(Entity):
    class Config:
        schema_extra = {
            "@context": [
                "/wiki/Category:Entity?action=raw&slot=jsonschema",
                {
                    "type": {"@id": "Property:HasType", "@type": "@id"},
                    "type*": {"@id": "Property:HasSchema", "@type": "@id"},
                },
            ],
            "title": "Item",
        }

    type: Optional[List[str]] = Field(
        ["Category:Item"],
        eval_template=[
            {
                "type": "mustache-wikitext",
                "mode": "render",
                "value": "{{#type}} [[:{{{.}}}]] <br>{{/type}}",
            }
        ],
        min_items=1,
        options={
            "collapsed": True,
            "conditional_visible": {"modes": ["default", "query"]},
        },
        propertyOrder=-1000,
        title="Types/Categories",
        title_={"de": "Typen/Kategorien"},
    )
    entry_access: Optional[AccessRestrictions] = Field(
        None,
        eval_template={
            "$comment": "See https://www.mediawiki.org/wiki/Extension:Semantic_ACL",
            "type": "mustache-wikitext",
            "mode": "render",
            "value": "{{entry_access.read.level}} {{=<% %>=}} {{#set: |Visible to= {{#switch: <%={{ }}=%> {{{entry_access.read.level}}} {{=<% %>=}} |public=public |internal=users |restricted=whitelist |#default=}} }} <%={{ }}=%>",
        },
        title="Access restrictions",
        title_={"de": "Zugriffsbeschränkungen"},
    )


Entity.update_forward_refs()
ObjectStatement.update_forward_refs()
DataStatement.update_forward_refs()
QuantityStatement.update_forward_refs()
Item.update_forward_refs()
